package sailpoint.services.api.idx;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import sailpoint.idx.SPObject;

import com.biliruben.util.csv.CSVSource;

/*
 * Utility class designed to analyze a given csv file generated by the following sql:
 * 
 * select id,name,parent,idx from spt_certification order by idx
 * 
 * The goal is to parse the csv and create certifcation objects.  Any certification object
 * that is marked to have a parent will be rolled into a list of children for a that given certification.
 * If that certification doesn't exist, it'll be boot strapped.  if that certification comes up later, it will
 * have its attributes updated.
 * 
 * Certification pojo:
 * 	-id
 * 	-children
 *  -parent
 *  -idx
 */
public class AnalyzeSQLCSV {

	private CSVSource _source;
	private Map<String, SPObject> _spObjs = new HashMap<String, SPObject>();
	private String _parentColumn = "PARENT";

	public AnalyzeSQLCSV (CSVSource csv) {
		_source = csv;
	}

	public void setParentColumn (String parent) {
		_parentColumn = parent;
	}

	public void analyze() {
		Iterator<Map<String,String>> it = _source.iterator();

		while (it.hasNext()) {
			Map<String, String> line = it.next();
			String id = line.get("ID");
			if (id == null) { // Doesn't work for us
				System.err.println("Null ID found for line: " + line.toString());
				continue;
			}
			if (id.equals("--")) {
				// skip that line
				continue;
			}
			String idx = line.get("IDX");
			
			//String name = line.get("NAME");
			String parent = line.get(_parentColumn);


			if (id != null) {

				SPObject spObj = getSPObj (id, "", parent, idx);
				if (parent != null && !parent.equals("")) {
					SPObject parentObj = getSPObj (spObj.getParent());
					// add child to parent
					parentObj.addChild(spObj);
					_spObjs.put(spObj.getParent(), parentObj);
				}

				_spObjs.put(id, spObj);
			}

		}

		report();		
	}

	private SPObject[] getOrderedArray (Collection<SPObject> objs) {
		SPObject[] arrySPObjs = new SPObject[objs.size()];
		arrySPObjs = objs.toArray(arrySPObjs);
		Arrays.sort(arrySPObjs);
		return arrySPObjs;
	}

	private SPObject getSPObj (String id) {
		SPObject obj = _spObjs.get(id);
		if (obj == null) {
			return getSPObj (id, null, null, null);
		} else {
			return obj;
		}
	}

	private SPObject getSPObj (String id, String name, String parent, String idx) {
		SPObject obj = _spObjs.get(id);
		if (obj == null) {
			obj = new SPObject (id, name, parent, idx);
		} else {
			obj.setId(id);
			obj.setName(name);
			obj.setParent(parent);
			obj.setIdx(idx);
		}
		return obj;
	}

	private String increaseIncrement(String currentIncrement) {
		String nextIncrement = "   ";
		return currentIncrement + nextIncrement;
	}

	private void report() {

		SPObject[] spObjs = getOrderedArray (_spObjs.values());
		for (SPObject spObj : spObjs) {
			report (spObj, "");
		}

	}


	private void report(SPObject spObj, String increment) {
		//System.out.println (increment + cert.toString());
		SPObject[] children = getOrderedArray(spObj.getChildren());
		int size = children.length;
		int lastIdx = -1;
		if (
				(spObj.getIdx() == null || spObj.getIdx().equals(""))
				&&
				(spObj.getParent() != null && !spObj.getParent().equals(""))
		)
		{
			warn (spObj.getIdx(), spObj.getParent(), "Null idx with parent! " + spObj.toString());
		}
		for (SPObject child : children) {
			try {
				int thisIdx = Integer.valueOf(child.getIdx());
				if (thisIdx != lastIdx + 1) {
					warn (child.getId(), spObj.getId(), "IDX aren't sequential!");
				}
				lastIdx = thisIdx;
			} catch (Exception e) {
				warn (child.getId(), spObj.getId(), "IDX issue for: " + child.toString());
			}

			report (child, increaseIncrement(increment));
		}
		if (lastIdx != size - 1) {
			warn ("", spObj.getId(), "IDX list size != Reported elements");
		}
	}

	public void setDelim(char delim) {
		if (_source != null) {
			_source.setDelim(delim);
		}
	}

	protected void warn (String id, String parentid, String msg) {
		System.out.println ("**** ID: " + id + " Parent: " + parentid+ ": " + msg + " ****");
	}

}
